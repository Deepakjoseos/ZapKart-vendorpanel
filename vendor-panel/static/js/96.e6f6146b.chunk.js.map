{"version":3,"sources":["views/app-views/dashboards/authDetails/index.js"],"names":["AuthDetails","useState","phoneVerificationOtp","setPhoneVerificationOtp","showPhoneOtpModal","setShowPhoneOtpModal","captchaCont","useRef","phoneVerified","setPhoneVerified","currentUserFormData","setCurrentUserFormData","userAlreadyExistInDB","setUserAlreadyExistInDB","isPasswordRegister","setIsPasswordRegister","showEmailVerificationScreen","setEmailVerificationScreen","history","useHistory","user","useSelector","state","auth","dispatch","useDispatch","validationSchema","Yup","firstName","required","lastName","useEffect","getProfile","a","fetch","url","method","data","email","phone","slice","displayImage","emailVerified","notification","success","message","replace","console","log","passwordAvailable","currentUser","providerData","find","cur","providerId","updateUserEmail","updateEmail","error","emailVerification","firebase","sendEmailVerification","then","err","otpSubmit","window","confirmationResult","confirm","onSubmitHandler","values","setSubmitting","resetForm","password","curUser","phoneNumberVerified","phoneNumber","sendingEmail","sendingValues","authVendorService","createVendor","res","getIdTokenResult","idTokenResult","localStorage","setItem","token","dispatchingData","business","address","gst","tanNumber","authenticated","push","editProfile","onEmailVerificationBtnHandler","title","type","htmlType","className","onClick","initialValues","onSubmit","enableReinitialize","fomrik","touched","errors","isSubmitting","setFieldValue","gutter","xs","sm","md","htmlFor","as","Input","name","style","border","value","disabled","length","recaptchaVerifier","RecaptchaVerifier","size","render","linkWithPhoneNumber","catch","textDecoration","cursor","marginBottom","visible","onCancel","footer","destroyOnClose","maskClosable","placeholder","onChange","e","target","id","ref"],"mappings":"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","file":"static/js/96.e6f6146b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport fetch from 'auth/FetchInterceptor'\r\nimport { Button, Card, Col, Input, Modal, notification, Row } from 'antd'\r\nimport { auth, currentUser } from 'auth/FirebaseAuth'\r\nimport firebase from 'firebase/app'\r\nimport { authenticated } from 'redux/actions/Auth'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport authVendorService from 'services/auth/vendor'\r\n\r\nconst AuthDetails = () => {\r\n  const [phoneVerificationOtp, setPhoneVerificationOtp] = useState(null)\r\n\r\n  const [showPhoneOtpModal, setShowPhoneOtpModal] = useState(false)\r\n\r\n  const captchaCont = useRef(null)\r\n\r\n  // Phonenumber\r\n  const [phoneVerified, setPhoneVerified] = useState(false)\r\n\r\n  const [currentUserFormData, setCurrentUserFormData] = useState({})\r\n  const [userAlreadyExistInDB, setUserAlreadyExistInDB] = useState(false)\r\n  const [isPasswordRegister, setIsPasswordRegister] = useState(false)\r\n\r\n  const [showEmailVerificationScreen, setEmailVerificationScreen] =\r\n    useState(false)\r\n\r\n  // Email\r\n\r\n  const history = useHistory()\r\n  const { user } = useSelector((state) => state.auth)\r\n  const dispatch = useDispatch()\r\n\r\n  const validationSchema = Yup.object({\r\n    // email: Yup.string().email('*Invalid Email').required('* Email Required'),\r\n    firstName: Yup.string().required('Required'),\r\n    lastName: Yup.string().required('Required'),\r\n    // displayImage: Yup.string().required('* Password Required'),\r\n    // phone: Yup.string().required('Phone Number Required'),\r\n    // confirmPassword: Yup.string()\r\n    //   .oneOf([Yup.ref('password'), null], '* Passwords must match')\r\n    //   .required('* Password Confirm Required'),\r\n  })\r\n\r\n  useEffect(() => {\r\n    const getProfile = async () => {\r\n      // console.log(newToken, 'the-new-token')\r\n\r\n      try {\r\n        const { data } = await fetch({\r\n          url: '/vendors',\r\n          method: 'get',\r\n        })\r\n        setCurrentUserFormData({\r\n          email: data.email || '',\r\n          phone: data?.phone?.slice(3) || '',\r\n          firstName: data.firstName || '',\r\n          lastName: data.lastName || '',\r\n          displayImage: data.displayImage,\r\n        })\r\n        setUserAlreadyExistInDB(true)\r\n\r\n        if (\r\n          user.emailVerified &&\r\n          user.phoneVerified &&\r\n          data.firstName &&\r\n          data.lastName\r\n        ) {\r\n          notification.success({ message: 'User Fully Authenticated' })\r\n          history.replace('/')\r\n        }\r\n\r\n        if (!user.emailVerified) {\r\n          setEmailVerificationScreen(true)\r\n        }\r\n\r\n        console.log(data, 'profile-data')\r\n      } catch (err) {\r\n        // if (err.response.data.status === 401) {\r\n        console.log(user, 'sjowww')\r\n        setCurrentUserFormData({\r\n          email: user.email || '',\r\n          phone: user?.phone?.slice(3) || '',\r\n          firstName: user.firstName || '',\r\n          lastName: user.lastName || '',\r\n          displayImage: user.displayImage,\r\n        })\r\n        setUserAlreadyExistInDB(false)\r\n        // } else {\r\n        //   //   notification.error(err.response.data.message)\r\n        // }\r\n      }\r\n\r\n      // await dispatch(setToken(newToken))\r\n    }\r\n    console.log('the-user', user)\r\n    getProfile()\r\n\r\n    const passwordAvailable = auth.currentUser.providerData?.find(\r\n      (cur) => cur.providerId === 'password'\r\n    )\r\n    setIsPasswordRegister(\r\n      passwordAvailable?.providerId === 'password' ? true : false\r\n    )\r\n\r\n    setPhoneVerified(user.phoneVerified)\r\n  }, [user])\r\n\r\n  const updateUserEmail = async (email) => {\r\n    try {\r\n      await currentUser.updateEmail(email)\r\n      notification.success({ message: 'Email Linked Success' })\r\n    } catch (err) {\r\n      notification.error({ message: err.message })\r\n      return 'error'\r\n    }\r\n  }\r\n\r\n  const emailVerification = async (email) => {\r\n    //Email Verification\r\n    console.log('the-email', email)\r\n    try {\r\n      firebase\r\n        .auth()\r\n        .currentUser.sendEmailVerification()\r\n        .then(() => {\r\n          notification.success({\r\n            message: `Email is sent to ${email}. Click the link to complete your Verification.`,\r\n          })\r\n          return true\r\n        })\r\n    } catch (err) {\r\n      notification.error({ message: err.message })\r\n    }\r\n  }\r\n\r\n  // Link phonenumber\r\n  const linkPhoneNumber = (phoneNumber) => {\r\n    if (!window.recaptchaVerifier) {\r\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\r\n        'recaptcha-container',\r\n        {\r\n          size: 'invisible',\r\n        }\r\n      )\r\n    }\r\n    window.recaptchaVerifier.render()\r\n\r\n    console.log(phoneNumber, 'heyyyy')\r\n\r\n    firebase\r\n      .auth()\r\n      .currentUser.linkWithPhoneNumber(\r\n        `+91 ${phoneNumber}`,\r\n        window.recaptchaVerifier\r\n      )\r\n      .then(function (confirmationResult) {\r\n        console.log(confirmationResult, 'plsss')\r\n        notification.success({ message: 'Otp sent to your phone number' })\r\n        setShowPhoneOtpModal(true)\r\n        // Ask user to provide the SMS code.\r\n        // var code = window.prompt('Enter your OTP here')\r\n        // return confirmationResult.confirm(code)\r\n\r\n        window.confirmationResult = confirmationResult\r\n      })\r\n      .catch((err) => {\r\n        setPhoneVerified(false)\r\n        setShowPhoneOtpModal(false)\r\n        notification.error({ message: err.message })\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  const otpSubmit = async () => {\r\n    try {\r\n      const res = await window.confirmationResult.confirm(phoneVerificationOtp)\r\n      notification.success({ message: 'Phone Number Linked Successfully' })\r\n\r\n      //   dispatch(\r\n      //     authenticated({\r\n      //       user: { ...user, phoneVerified: true },\r\n      //       token: window.localStorage.getItem('auth_token'),\r\n      //     })\r\n      //   )\r\n      setPhoneVerified(true)\r\n      setShowPhoneOtpModal(false)\r\n    } catch (err) {\r\n      setPhoneVerified(false)\r\n      setShowPhoneOtpModal(false)\r\n      notification.error({ message: err.message })\r\n    }\r\n  }\r\n\r\n  const onSubmitHandler = async (values, { setSubmitting, resetForm }) => {\r\n    // const imgValue = await singleImageUploader(\r\n    //   values.image[0].originFileObj,\r\n    //   values.image,\r\n    //   values.image[0].url,\r\n    // )\r\n    // values.image = imgValue\r\n    // Verifying Email and password\r\n    const { password } = values\r\n    const curUser = firebase.auth().currentUser\r\n\r\n    const email = curUser.email\r\n    const emailVerified = curUser.emailVerified\r\n    const phoneNumberVerified = curUser.phoneNumber\r\n\r\n    console.log(emailVerified, 'showww')\r\n\r\n    if (phoneNumberVerified) {\r\n      // if (emailExist) {\r\n      //   values.email = emailExist\r\n      // }\r\n\r\n      if (!email) {\r\n        const res = await updateUserEmail(values.email)\r\n        if (res === 'error') {\r\n          return\r\n        }\r\n      }\r\n      if (!emailVerified) {\r\n        const sendingEmail = email || values.email\r\n        await emailVerification(sendingEmail)\r\n      }\r\n\r\n      //   const imgValue = await singleImageUploader(values.displayImage)\r\n      //   values.displayImage = imgValue\r\n\r\n      const sendingValues = {\r\n        firstName: values.firstName,\r\n        lastName: values.lastName,\r\n        displayImage: curUser.displayImage,\r\n      }\r\n\r\n      if (!userAlreadyExistInDB) {\r\n        try {\r\n          const res = await authVendorService.createVendor(sendingValues)\r\n\r\n          const idTokenResult = await curUser.getIdTokenResult(true)\r\n          window.localStorage.setItem('auth_token', idTokenResult.token)\r\n\r\n          const data = await authVendorService.getProfile()\r\n\r\n          const dispatchingData = {\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            email: data.email,\r\n            phone: data.phone,\r\n            displayImage: data.displayImage,\r\n            emailVerified: emailVerified,\r\n            phoneVerified: user.phoneNumber ? true : false,\r\n            business: data.business,\r\n            address: data.address,\r\n            gst: data.gst,\r\n            tanNumber: data.tanNumber,\r\n          }\r\n\r\n          await dispatch(\r\n            authenticated({\r\n              user: dispatchingData,\r\n              token: idTokenResult.token,\r\n            })\r\n          )\r\n\r\n          if (res) {\r\n            notification.success({ message: 'Authentication Success: Create' })\r\n            notification.success({ message: 'User Fully Authenticated' })\r\n            // window.location.href = '/'\r\n            history.push('/')\r\n          }\r\n        } catch (err) {\r\n          console.log('err', err)\r\n          //   toast.error(err.response.data.message)\r\n        }\r\n      } else {\r\n        try {\r\n          const res = await authVendorService.editProfile(sendingValues)\r\n\r\n          const idTokenResult = await curUser.getIdTokenResult(true)\r\n          window.localStorage.setItem('auth_token', idTokenResult.token)\r\n\r\n          const data = await authVendorService.getProfile()\r\n\r\n          const dispatchingData = {\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            email: data.email,\r\n            phone: data.phone,\r\n            displayImage: data.displayImage,\r\n            emailVerified: emailVerified,\r\n            phoneVerified: user.phoneNumber ? true : false,\r\n            business: data.business,\r\n            address: data.address,\r\n            gst: data.gst,\r\n            tanNumber: data.tanNumber,\r\n          }\r\n\r\n          await dispatch(\r\n            authenticated({\r\n              user: dispatchingData,\r\n              token: idTokenResult.token,\r\n            })\r\n          )\r\n\r\n          if (res) {\r\n            notification.success({ message: 'Authentication Success: Edit' })\r\n            notification.success({ message: 'User Fully Authenticated' })\r\n\r\n            // window.location.href = '/'\r\n            history.push('/')\r\n          }\r\n        } catch (err) {\r\n          //   toast.error(err.response.data.message)\r\n          console.log('err', err)\r\n        }\r\n      }\r\n    } else {\r\n      notification.error({ message: 'You need To Verify your phone Number' })\r\n    }\r\n  }\r\n\r\n  const onEmailVerificationBtnHandler = async () => {\r\n    await emailVerification(firebase.auth().currentUser.email)\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!showEmailVerificationScreen ? (\r\n        <div>\r\n          <Formik\r\n            initialValues={currentUserFormData}\r\n            onSubmit={onSubmitHandler}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n          >\r\n            {(fomrik) => {\r\n              const { touched, errors, isSubmitting, values, setFieldValue } =\r\n                fomrik\r\n\r\n              console.log(values, 'values')\r\n\r\n              return (\r\n                <Row gutter={16}>\r\n                  <Col xs={24} sm={24} md={17}>\r\n                    <Card title=\"User Details\" className=\"p-3\">\r\n                      <Form>\r\n                        <div className=\"mb-3\">\r\n                          <label htmlFor=\"firstName\">First Name</label>\r\n                          <Field\r\n                            as={Input}\r\n                            className=\"first-name-signup form-control\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            style={{\r\n                              border: `${\r\n                                touched.firstName && errors.firstName\r\n                                  ? '1px solid red'\r\n                                  : ''\r\n                              }`,\r\n                            }}\r\n                          />\r\n                          <ErrorMessage name=\"firstName\" />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                          <label htmlFor=\"lastName\">Last Name</label>\r\n                          <Field\r\n                            as={Input}\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            className=\"form-control\"\r\n                            style={{\r\n                              border: `${\r\n                                touched.lastName && errors.lastName\r\n                                  ? '1px solid red'\r\n                                  : ''\r\n                              }`,\r\n                            }}\r\n                          />\r\n                          <ErrorMessage name=\"lastName\" />\r\n                        </div>\r\n                        {/* <div className=\"form-group\">\r\n                  <label htmlFor=\"displayImage\">Display Image</label>\r\n                  <ImageUploader\r\n                    source={values.displayImage ? values.displayImage : null}\r\n                    name=\"displayImage\"\r\n                    setSource={setFieldValue}\r\n                  />\r\n  \r\n                  <ErrorMessage name=\"displayImage\" component={ErrorText} />\r\n                </div> */}\r\n                        {/* OTP => PHONE VERIFICATION */}\r\n                        {/* {!user.phoneVerified && !phoneVerified ? ( */}\r\n                        <>\r\n                          <div>\r\n                            <label htmlFor=\"phone\">Phone</label>\r\n                            <Field\r\n                              as={Input}\r\n                              type=\"phone\"\r\n                              name=\"phone\"\r\n                              value={values.phone}\r\n                              className=\"form-control\"\r\n                              disabled={phoneVerified}\r\n                              style={{\r\n                                border: `${\r\n                                  touched.phone && errors.phone\r\n                                    ? '1px solid red'\r\n                                    : ''\r\n                                }`,\r\n                              }}\r\n                            />\r\n                            <ErrorMessage name=\"phone\" />\r\n                          </div>\r\n                          {!phoneVerified && (\r\n                            <p\r\n                              onClick={() => {\r\n                                if (values.phone?.length === 10) {\r\n                                  linkPhoneNumber(values.phone)\r\n                                } else {\r\n                                  notification.error({\r\n                                    message: 'Please Enter Valid Phone Number',\r\n                                  })\r\n                                }\r\n                              }}\r\n                              style={{\r\n                                textDecoration: 'underline',\r\n                                cursor: 'pointer',\r\n                                marginBottom: '10px',\r\n                              }}\r\n                            >\r\n                              Verify PhoneNumber\r\n                            </p>\r\n                          )}\r\n                        </>\r\n                        <div className=\"mb-3\">\r\n                          <label htmlFor=\"lastName\">Email</label>\r\n                          <Field\r\n                            as={Input}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            className=\"form-control\"\r\n                            disabled={isPasswordRegister || user.emailVerified}\r\n                            style={{\r\n                              border: `${\r\n                                touched.email && errors.email\r\n                                  ? '1px solid red'\r\n                                  : ''\r\n                              }`,\r\n                            }}\r\n                          />\r\n                          <ErrorMessage name=\"email\" />\r\n                        </div>\r\n\r\n                        <div>\r\n                          <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            className=\"btn w-100 mb-3\"\r\n                            disabled={isSubmitting}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </div>\r\n                      </Form>\r\n                    </Card>\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            }}\r\n          </Formik>\r\n\r\n          <Modal\r\n            title=\"Verify OTP\"\r\n            visible={showPhoneOtpModal}\r\n            onCancel={() => setShowPhoneOtpModal(false)}\r\n            footer={null}\r\n            destroyOnClose\r\n            maskClosable={false}\r\n          >\r\n            <div className=\"form-group\">\r\n              <Input\r\n                type=\"text\"\r\n                name=\"otp\"\r\n                placeholder=\"Enter OTP\"\r\n                className=\"form-control mb-3\"\r\n                onChange={(e) => setPhoneVerificationOtp(e.target.value)}\r\n              />\r\n            </div>\r\n            <Button type=\"primary\" htmlType=\"button\" onClick={otpSubmit}>\r\n              Submit\r\n            </Button>\r\n          </Modal>\r\n          <div id=\"recaptcha-container\" ref={captchaCont}></div>\r\n        </div>\r\n      ) : (\r\n        <Card title=\"Email Verification Pending\">\r\n          <h3>You need to verify your Email Address</h3>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"button\"\r\n            className=\"btn\"\r\n            onClick={onEmailVerificationBtnHandler}\r\n          >\r\n            Verify Email Address\r\n          </Button>\r\n        </Card>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AuthDetails\r\n"],"sourceRoot":""}